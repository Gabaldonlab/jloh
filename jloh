#!/usr/bin/env python3

"""
###
JLOH - Inferring Loss of Heterozygosity Blocks from Short-read sequencing data

Copyright (C) 2023 Matteo Schiavinato

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
###
"""


import sys
import os
import os.path

# change this if you want a different one
interpreter="python3"

# help section
if len(sys.argv) == 1:
    sys.argv.append("--help")

if (sys.argv[1] in ["--help", "-h", "-help", "help", "getopt", "usage"]):
    sys.stderr.write("""

    JLOH 
    Matteo Schiavinato
    Barcelona Supercomputing Center (BSC) 
    2023 
    contact: matteo.schiavinato.90@gmail.com

    v1.1.0

    ####

 -- Extraction
    stats               Estimate heterozygous and homozygous SNP statistics
    g2g                 Align two genomes to find regions that should carry SNPs
    extract             Extract LOH blocks from VCF, BAM and FASTA files
    onco_extract        Extract LOH blocks from VCF, BAM and FASTA files in a tumor context

 -- Operations
    filter              Filter extracted LOH blocks
    intersect           Perform intersection/removal operations with output files
    cluster             Cluster different runs by overlap 
    chimeric            Extract genes featuring LOH blocks from different haplotypes
    junctions           Calculate number of block-to-block junctions over the genome

 -- Visualization
    plot                Make an LOH propensity plot from "extract" output file(s)

 -- Simulation
    sim                 Simulate a divergent copy of a genome


""")

else:
    args = " ".join(sys.argv[1:])
    PROGRAMDIR = os.path.dirname(os.path.realpath(__file__))
    os.system(f"{interpreter} {PROGRAMDIR}/src/{args}")
